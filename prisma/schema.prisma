generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blogs {
  id                 Int        @id @default(autoincrement())
  author             String     @db.VarChar(255)
  content            String
  user_id            Int?
  title              String     @db.VarChar(255)
  number_of_comments Int
  photo_cover_url    String     @db.VarChar(255)
  category           String?    @db.VarChar(255)
  updated_at         DateTime?  @default(now()) @db.Timestamptz(6)
  created_at         DateTime?  @default(now()) @db.Timestamptz(6)
  users              users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blogs_author_id_fkey")
  comments           comments[]
}

model comments {
  id         Int       @id @default(autoincrement())
  user_id    Int
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  blog_id    Int
  blogs      blogs     @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model news {
  id                 Int       @id @default(autoincrement())
  title              String    @db.VarChar(255)
  content            String
  author_id          Int?
  author             String    @db.VarChar(255)
  number_of_comments Int?
  photo_cover_url    String    @db.VarChar(255)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  category           String?   @db.VarChar(255)
  users              users?    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model quotes {
  id     Int     @id @default(autoincrement())
  quote  String?
  author String?
}

model users {
  id                Int        @id @default(autoincrement())
  first_name        String     @db.VarChar(255)
  last_name         String     @db.VarChar(255)
  email             String     @unique @db.VarChar(255)
  password          String?    @db.VarChar(255)
  date_of_birth     DateTime?  @db.Date
  title             String?    @db.VarChar(255)
  emp_type          String?    @db.VarChar(255)
  emp_region        String?    @db.VarChar(255)
  child_grade_level String?    @db.VarChar(255)
  school_type       String?    @db.VarChar(255)
  school_region     String?    @db.VarChar(255)
  created_at        DateTime?  @default(now()) @db.Timestamptz(6)
  blogs             blogs[]
  comments          comments[]
  news              news[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}
