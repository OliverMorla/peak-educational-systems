generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blogs {
  blog_id         Int        @id @default(autoincrement())
  author          String     @db.VarChar(255)
  content         String
  user_id         Int?
  title           String     @db.VarChar(255)
  photo_cover_url String     @db.VarChar(255)
  category        String?    @db.VarChar(255)
  updated_at      DateTime?  @default(now()) @db.Timestamptz(6)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  users           users?     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "blogs_author_id_fkey")
  comments        comments[]
}

model comments {
  id         Int       @id @default(autoincrement())
  user_id    Int
  content    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  blog_id    Int?
  news_id    Int?
  blogs      blogs?    @relation(fields: [blog_id], references: [blog_id], onDelete: Cascade, onUpdate: NoAction)
  news       news?     @relation(fields: [news_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([news_id], map: "fki_comments_news_id_fkey")
}

model news {
  id              Int        @id @default(autoincrement())
  title           String     @db.VarChar(255)
  content         String
  user_id         Int        @default(1)
  photo_cover_url String     @db.VarChar(255)
  created_at      DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?  @default(now()) @db.Timestamptz(6)
  category        String?    @db.VarChar(255)
  views           Int        @default(0)
  comments        comments[]
  users           users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "news_author_id_fkey")
}

model quotes {
  id     Int     @id @default(autoincrement())
  quote  String?
  author String?
}

model users {
  id                                              Int             @id @default(autoincrement())
  first_name                                      String          @db.VarChar(255)
  last_name                                       String?         @db.VarChar(255)
  email                                           String          @unique @db.VarChar(255)
  password                                        String          @db.VarChar(255)
  date_of_birth                                   DateTime        @db.Date
  title                                           String?         @db.VarChar(255)
  employment_type                                 String?         @db.VarChar(255)
  employment_region                               String?         @db.VarChar(255)
  child_grade_level                               String?         @db.VarChar(255)
  school_type                                     String?         @db.VarChar(255)
  school_region                                   String?         @db.VarChar(255)
  created_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  role                                            String          @default("user") @db.VarChar(255)
  updated_at                                      DateTime?       @default(now()) @db.Timestamptz(6)
  avatar_url                                      String?         @db.VarChar(255)
  blogs                                           blogs[]
  chat_messages_chat_messages_from_user_idTousers chat_messages[] @relation("chat_messages_from_user_idTousers")
  chat_messages_chat_messages_to_user_idTousers   chat_messages[] @relation("chat_messages_to_user_idTousers")
  comments                                        comments[]
  friends_friends_friend_idTousers                friends[]       @relation("friends_friend_idTousers")
  friends_friends_user_idTousers                  friends[]       @relation("friends_user_idTousers")
  news                                            news[]
  todo                                            todo[]
}

model chat_messages {
  message_id                              Int       @id @default(autoincrement())
  from_user_id                            Int?
  to_user_id                              Int?
  message_text                            String?
  timestamp                               DateTime? @default(now()) @db.Timestamptz(6)
  users_chat_messages_from_user_idTousers users?    @relation("chat_messages_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_chat_messages_to_user_idTousers   users?    @relation("chat_messages_to_user_idTousers", fields: [to_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model friends {
  user_id                        Int
  friend_id                      Int
  status                         friendship_status?
  created_at                     DateTime?          @default(now()) @db.Timestamp(6)
  updated_at                     DateTime?          @default(now()) @db.Timestamp(6)
  users_friends_friend_idTousers users              @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_friends_user_idTousers   users              @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, friend_id])
}

model todo {
  todo_id        Int       @id @default(autoincrement())
  todo_text      String
  todo_completed Boolean   @default(false)
  user_id        Int
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  users          users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum friendship_status {
  pending
  accepted
  blocked
}
